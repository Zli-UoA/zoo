//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Channel")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    pub channel_name: String,
    pub description: Option<String>,
    pub is_private: bool,
    #[sea_orm(column_type = "Text")]
    pub created_user_id: String,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub archive_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel_user::Entity")]
    ChannelUser,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedUserId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::channel_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelUser.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::channel_user::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::channel_user::Relation::Channel.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
